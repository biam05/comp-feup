import io;
Life {
  .field private UNDERPOP_LIM.i32;
  .field private OVERPOP_LIM.i32;
  .field private REPRODUCE_NUM.i32;
  .field private LOOPS_PER_MS.i32;
  .field private xMax.i32;
  .field private yMax.i32;
  .field private field_temp.array.i32;

  .construct Life().V {
    invokespecial(this, "<init>").V;
  }

  .method public static main(a.array.String).V {
    l.Life :=.Life new(Life).Life;
    invokespecial(l.Life, "<init>").V;
    invokevirtual(l.Life, "init").bool;
    goto Test_1;
    Loop_1:
      invokevirtual(l.Life, "printField").bool;
      invokevirtual(l.Life, "update").bool;
      unused.i32 :=.i32 invokestatic(io, "read").i32;
    Test_1:
      if (true.bool &&.bool true.bool) goto Loop_1;
    End_1:
      ret.V;
    }

  .method public init().bool {
    lineLenA.array.i32 :=.array.i32 new(array, 1.i32).array.i32;
    putfield(this, UNDERPOP_LIM.i32, 2.i32).V;
    putfield(this, OVERPOP_LIM.i32, 3.i32).V;
    putfield(this, REPRODUCE_NUM.i32, 3.i32).V;
    putfield(this, LOOPS_PER_MS.i32, 225000.i32).V;
    t1.array.i32 :=.array.i32 invokevirtual(this, "field", lineLenA.array.i32).array.i32;
    putfield(this, field_temp.array.i32, t1.array.i32).V;
    t2.i32 :=.i32 0.i32;
    lineLen.i32 :=.i32 lineLenA[t2.i32].i32;
    t3.i32 :=.i32 lineLen.i32 -.i32 1.i32;
    putfield(this, xMax.i32, t3.i32).V;
    t4.array.i32 :=.array.i32 getfield(this, field_temp.array.i32).array.i32;
    t5.i32 :=.i32 arraylength(t4.array.i32).i32;
    t6.i32 :=.i32 t5.i32 /.i32 lineLen.i32 ;
    t7.i32 :=.i32 t6.i32 -.i32 1.i32;
    putfield(this, yMax.i32, t7.i32).V;
    ret.bool true.bool;
  }

  .method public field(lineLen.array.i32).array.i32 {
    field_temp.array.i32 :=.array.i32 new(array, 100.i32).array.i32;
    t1.i32 :=.i32 0.i32;
    $1.lineLen[t1.i32].i32 :=.i32 10.i32;
    t2.i32 :=.i32 0.i32;
    field_temp[t2.i32].i32 :=.i32 0.i32;
    t3.i32 :=.i32 1.i32;
    field_temp[t3.i32].i32 :=.i32 0.i32;
    t4.i32 :=.i32 2.i32;
    field_temp[t4.i32].i32 :=.i32 1.i32;
    t5.i32 :=.i32 3.i32;
    field_temp[t5.i32].i32 :=.i32 0.i32;
    t6.i32 :=.i32 4.i32;
    field_temp[t6.i32].i32 :=.i32 0.i32;
    t7.i32 :=.i32 5.i32;
    field_temp[t7.i32].i32 :=.i32 0.i32;
    t8.i32 :=.i32 6.i32;
    field_temp[t8.i32].i32 :=.i32 0.i32;
    t9.i32 :=.i32 7.i32;
    field_temp[t9.i32].i32 :=.i32 0.i32;
    t10.i32 :=.i32 8.i32;
    field_temp[t10.i32].i32 :=.i32 0.i32;
    t11.i32 :=.i32 9.i32;
    field_temp[t11.i32].i32 :=.i32 0.i32;
    t12.i32 :=.i32 10.i32;
    field_temp[t12.i32].i32 :=.i32 1.i32;
    t13.i32 :=.i32 11.i32;
    field_temp[t13.i32].i32 :=.i32 0.i32;
    t14.i32 :=.i32 12.i32;
    field_temp[t14.i32].i32 :=.i32 1.i32;
    t15.i32 :=.i32 13.i32;
    field_temp[t15.i32].i32 :=.i32 0.i32;
    t16.i32 :=.i32 14.i32;
    field_temp[t16.i32].i32 :=.i32 0.i32;
    t17.i32 :=.i32 15.i32;
    field_temp[t17.i32].i32 :=.i32 0.i32;
    t18.i32 :=.i32 16.i32;
    field_temp[t18.i32].i32 :=.i32 0.i32;
    t19.i32 :=.i32 17.i32;
    field_temp[t19.i32].i32 :=.i32 0.i32;
    t20.i32 :=.i32 18.i32;
    field_temp[t20.i32].i32 :=.i32 0.i32;
    t21.i32 :=.i32 19.i32;
    field_temp[t21.i32].i32 :=.i32 0.i32;
    t22.i32 :=.i32 20.i32;
    field_temp[t22.i32].i32 :=.i32 0.i32;
    t23.i32 :=.i32 21.i32;
    field_temp[t23.i32].i32 :=.i32 1.i32;
    t24.i32 :=.i32 22.i32;
    field_temp[t24.i32].i32 :=.i32 1.i32;
    t25.i32 :=.i32 23.i32;
    field_temp[t25.i32].i32 :=.i32 0.i32;
    t26.i32 :=.i32 24.i32;
    field_temp[t26.i32].i32 :=.i32 0.i32;
    t27.i32 :=.i32 25.i32;
    field_temp[t27.i32].i32 :=.i32 0.i32;
    t28.i32 :=.i32 26.i32;
    field_temp[t28.i32].i32 :=.i32 0.i32;
    t29.i32 :=.i32 27.i32;
    field_temp[t29.i32].i32 :=.i32 0.i32;
    t30.i32 :=.i32 28.i32;
    field_temp[t30.i32].i32 :=.i32 0.i32;
    t31.i32 :=.i32 29.i32;
    field_temp[t31.i32].i32 :=.i32 0.i32;
    t32.i32 :=.i32 30.i32;
    field_temp[t32.i32].i32 :=.i32 0.i32;
    t33.i32 :=.i32 31.i32;
    field_temp[t33.i32].i32 :=.i32 0.i32;
    t34.i32 :=.i32 32.i32;
    field_temp[t34.i32].i32 :=.i32 0.i32;
    t35.i32 :=.i32 33.i32;
    field_temp[t35.i32].i32 :=.i32 0.i32;
    t36.i32 :=.i32 34.i32;
    field_temp[t36.i32].i32 :=.i32 0.i32;
    t37.i32 :=.i32 35.i32;
    field_temp[t37.i32].i32 :=.i32 0.i32;
    t38.i32 :=.i32 36.i32;
    field_temp[t38.i32].i32 :=.i32 0.i32;
    t39.i32 :=.i32 37.i32;
    field_temp[t39.i32].i32 :=.i32 0.i32;
    t40.i32 :=.i32 38.i32;
    field_temp[t40.i32].i32 :=.i32 0.i32;
    t41.i32 :=.i32 39.i32;
    field_temp[t41.i32].i32 :=.i32 0.i32;
    t42.i32 :=.i32 40.i32;
    field_temp[t42.i32].i32 :=.i32 0.i32;
    t43.i32 :=.i32 41.i32;
    field_temp[t43.i32].i32 :=.i32 0.i32;
    t44.i32 :=.i32 42.i32;
    field_temp[t44.i32].i32 :=.i32 0.i32;
    t45.i32 :=.i32 43.i32;
    field_temp[t45.i32].i32 :=.i32 0.i32;
    t46.i32 :=.i32 44.i32;
    field_temp[t46.i32].i32 :=.i32 0.i32;
    t47.i32 :=.i32 45.i32;
    field_temp[t47.i32].i32 :=.i32 0.i32;
    t48.i32 :=.i32 46.i32;
    field_temp[t48.i32].i32 :=.i32 0.i32;
    t49.i32 :=.i32 47.i32;
    field_temp[t49.i32].i32 :=.i32 0.i32;
    t50.i32 :=.i32 48.i32;
    field_temp[t50.i32].i32 :=.i32 0.i32;
    t51.i32 :=.i32 49.i32;
    field_temp[t51.i32].i32 :=.i32 0.i32;
    t52.i32 :=.i32 50.i32;
    field_temp[t52.i32].i32 :=.i32 0.i32;
    t53.i32 :=.i32 51.i32;
    field_temp[t53.i32].i32 :=.i32 0.i32;
    t54.i32 :=.i32 52.i32;
    field_temp[t54.i32].i32 :=.i32 0.i32;
    t55.i32 :=.i32 53.i32;
    field_temp[t55.i32].i32 :=.i32 0.i32;
    t56.i32 :=.i32 54.i32;
    field_temp[t56.i32].i32 :=.i32 0.i32;
    t57.i32 :=.i32 55.i32;
    field_temp[t57.i32].i32 :=.i32 0.i32;
    t58.i32 :=.i32 56.i32;
    field_temp[t58.i32].i32 :=.i32 0.i32;
    t59.i32 :=.i32 57.i32;
    field_temp[t59.i32].i32 :=.i32 0.i32;
    t60.i32 :=.i32 58.i32;
    field_temp[t60.i32].i32 :=.i32 0.i32;
    t61.i32 :=.i32 59.i32;
    field_temp[t61.i32].i32 :=.i32 0.i32;
    t62.i32 :=.i32 60.i32;
    field_temp[t62.i32].i32 :=.i32 0.i32;
    t63.i32 :=.i32 61.i32;
    field_temp[t63.i32].i32 :=.i32 0.i32;
    t64.i32 :=.i32 62.i32;
    field_temp[t64.i32].i32 :=.i32 0.i32;
    t65.i32 :=.i32 63.i32;
    field_temp[t65.i32].i32 :=.i32 0.i32;
    t66.i32 :=.i32 64.i32;
    field_temp[t66.i32].i32 :=.i32 0.i32;
    t67.i32 :=.i32 65.i32;
    field_temp[t67.i32].i32 :=.i32 0.i32;
    t68.i32 :=.i32 66.i32;
    field_temp[t68.i32].i32 :=.i32 0.i32;
    t69.i32 :=.i32 67.i32;
    field_temp[t69.i32].i32 :=.i32 0.i32;
    t70.i32 :=.i32 68.i32;
    field_temp[t70.i32].i32 :=.i32 0.i32;
    t71.i32 :=.i32 69.i32;
    field_temp[t71.i32].i32 :=.i32 0.i32;
    t72.i32 :=.i32 70.i32;
    field_temp[t72.i32].i32 :=.i32 0.i32;
    t73.i32 :=.i32 71.i32;
    field_temp[t73.i32].i32 :=.i32 0.i32;
    t74.i32 :=.i32 72.i32;
    field_temp[t74.i32].i32 :=.i32 0.i32;
    t75.i32 :=.i32 73.i32;
    field_temp[t75.i32].i32 :=.i32 0.i32;
    t76.i32 :=.i32 74.i32;
    field_temp[t76.i32].i32 :=.i32 0.i32;
    t77.i32 :=.i32 75.i32;
    field_temp[t77.i32].i32 :=.i32 0.i32;
    t78.i32 :=.i32 76.i32;
    field_temp[t78.i32].i32 :=.i32 0.i32;
    t79.i32 :=.i32 77.i32;
    field_temp[t79.i32].i32 :=.i32 0.i32;
    t80.i32 :=.i32 78.i32;
    field_temp[t80.i32].i32 :=.i32 0.i32;
    t81.i32 :=.i32 79.i32;
    field_temp[t81.i32].i32 :=.i32 0.i32;
    t82.i32 :=.i32 80.i32;
    field_temp[t82.i32].i32 :=.i32 0.i32;
    t83.i32 :=.i32 81.i32;
    field_temp[t83.i32].i32 :=.i32 0.i32;
    t84.i32 :=.i32 82.i32;
    field_temp[t84.i32].i32 :=.i32 0.i32;
    t85.i32 :=.i32 83.i32;
    field_temp[t85.i32].i32 :=.i32 0.i32;
    t86.i32 :=.i32 84.i32;
    field_temp[t86.i32].i32 :=.i32 0.i32;
    t87.i32 :=.i32 85.i32;
    field_temp[t87.i32].i32 :=.i32 0.i32;
    t88.i32 :=.i32 86.i32;
    field_temp[t88.i32].i32 :=.i32 0.i32;
    t89.i32 :=.i32 87.i32;
    field_temp[t89.i32].i32 :=.i32 0.i32;
    t90.i32 :=.i32 88.i32;
    field_temp[t90.i32].i32 :=.i32 0.i32;
    t91.i32 :=.i32 89.i32;
    field_temp[t91.i32].i32 :=.i32 0.i32;
    t92.i32 :=.i32 90.i32;
    field_temp[t92.i32].i32 :=.i32 0.i32;
    t93.i32 :=.i32 91.i32;
    field_temp[t93.i32].i32 :=.i32 0.i32;
    t94.i32 :=.i32 92.i32;
    field_temp[t94.i32].i32 :=.i32 0.i32;
    t95.i32 :=.i32 93.i32;
    field_temp[t95.i32].i32 :=.i32 0.i32;
    t96.i32 :=.i32 94.i32;
    field_temp[t96.i32].i32 :=.i32 0.i32;
    t97.i32 :=.i32 95.i32;
    field_temp[t97.i32].i32 :=.i32 0.i32;
    t98.i32 :=.i32 96.i32;
    field_temp[t98.i32].i32 :=.i32 0.i32;
    t99.i32 :=.i32 97.i32;
    field_temp[t99.i32].i32 :=.i32 0.i32;
    t100.i32 :=.i32 98.i32;
    field_temp[t100.i32].i32 :=.i32 0.i32;
    t101.i32 :=.i32 99.i32;
    field_temp[t101.i32].i32 :=.i32 0.i32;
    ret.array.i32 field_temp.array.i32;
  }

  .method public update().bool {
    t1.array.i32 :=.array.i32 getfield(this, field_temp.array.i32).array.i32;
    t2.i32 :=.i32 arraylength(t1.array.i32).i32;
    newField.array.i32 :=.array.i32 new(array, t2.i32 ).array.i32;
    i.i32 :=.i32 0.i32;
    goto Test_2;
    Loop_2:
      t3.array.i32 :=.array.i32 getfield(this, field_temp.array.i32).array.i32;
      cur.i32 :=.i32 t3[i.i32].i32;
      neighN.i32 :=.i32 invokevirtual(this, "getLiveNeighborN", i.i32).i32;
        t4.bool :=.bool cur.i32 <.i32 1.i32;
        if (t4.bool !.bool t4.bool) goto ifbody_1;
          t5.i32 :=.i32 getfield(this, REPRODUCE_NUM.i32).i32;
          t6.bool :=.bool invokevirtual(this, "eq", neighN.i32, t5.i32).bool;
          if (t6.bool &&.bool true.bool) goto ifbody_2;
            t7.array.i32 :=.array.i32 getfield(this, field_temp.array.i32).array.i32;
            newField[i.i32].i32 :=.i32 t7[i.i32].i32;
            goto endif_2;
          ifbody_2:
            newField[i.i32].i32 :=.i32 1.i32;
          endif_2:
          goto endif_1;
        ifbody_1:
          t8.i32 :=.i32 getfield(this, UNDERPOP_LIM.i32).i32;
          t9.bool :=.bool invokevirtual(this, "ge", neighN.i32, t8.i32).bool;
          t10.i32 :=.i32 getfield(this, OVERPOP_LIM.i32).i32;
          t11.bool :=.bool invokevirtual(this, "le", neighN.i32, t10.i32).bool;
          goodPop.bool :=.bool t9.bool &&.bool t11.bool;
          if (goodPop.bool !.bool goodPop.bool) goto ifbody_3;
            t12.array.i32 :=.array.i32 getfield(this, field_temp.array.i32).array.i32;
            newField[i.i32].i32 :=.i32 t12[i.i32].i32;
            goto endif_3;
          ifbody_3:
            newField[i.i32].i32 :=.i32 0.i32;
          endif_3:
          endif_1:
        i.i32 :=.i32 i.i32 +.i32 1.i32;
    Test_2:
      t13.array.i32 :=.array.i32 getfield(this, field_temp.array.i32).array.i32;
      t14.i32 :=.i32 arraylength(t13.array.i32).i32;
      if (i.i32 <.i32 t14.i32) goto Loop_2;
    End_2:
      putfield(this, field_temp.array.i32, newField.array.i32).V;
      ret.bool true.bool;
    }

  .method public printField().bool {
    i.i32 :=.i32 0.i32;
    j.i32 :=.i32 0.i32;
    goto Test_3;
    Loop_3:
        t3.array.i32 :=.array.i32 getfield(this, field_temp.array.i32).array.i32;
        t4.i32 :=.i32 t3[i.i32].i32;
        t1.i32 :=.i32 getfield(this, xMax.i32).i32;
        t2.bool :=.bool invokevirtual(this, "gt", j.i32, t1.i32).bool;
        if (t2.bool &&.bool true.bool) goto ifbody_4;
          goto endif_4;
        ifbody_4:
          invokestatic(io, "println").V;
          j.i32 :=.i32 0.i32;
        endif_4:
        invokestatic(io, "print", t4.i32).V;
        i.i32 :=.i32 i.i32 +.i32 1.i32;
        j.i32 :=.i32 j.i32 +.i32 1.i32;
    Test_3:
      t5.array.i32 :=.array.i32 getfield(this, field_temp.array.i32).array.i32;
      t6.i32 :=.i32 arraylength(t5.array.i32).i32;
      if (i.i32 <.i32 t6.i32) goto Loop_3;
    End_3:
      invokestatic(io, "println").V;
      invokestatic(io, "println").V;
      ret.bool true.bool;
    }

  .method public trIdx(x.i32, y.i32).i32 {
    t1.i32 :=.i32 getfield(this, xMax.i32).i32;
    t2.i32 :=.i32 t1.i32 +.i32 1.i32;
    t3.i32 :=.i32 t2.i32 *.i32 $2.y.i32 ;
    t4.i32 :=.i32 $1.x.i32 +.i32 t3.i32;
    ret.i32 t4.i32 ;
  }

  .method public cartIdx(absPos.i32).array.i32 {
    t1.i32 :=.i32 getfield(this, xMax.i32).i32;
    xLim.i32 :=.i32 t1.i32 +.i32 1.i32;
    y.i32 :=.i32 $1.absPos.i32 /.i32 xLim.i32 ;
    t2.i32 :=.i32 y.i32 *.i32 xLim.i32 ;
    x.i32 :=.i32 $1.absPos.i32 -.i32 t2.i32;
    ret_temp.array.i32 :=.array.i32 new(array, 2.i32).array.i32;
    t3.i32 :=.i32 0.i32;
    ret_temp[t3.i32].i32 :=.i32 x.i32;
    t4.i32 :=.i32 1.i32;
    ret_temp[t4.i32].i32 :=.i32 y.i32;
    ret.array.i32 ret_temp.array.i32;
  }

  .method public getNeighborCoords(absPos.i32).array.i32 {
    cart.array.i32 :=.array.i32 invokevirtual(this, "cartIdx", $1.absPos.i32).array.i32;
    t1.i32 :=.i32 0.i32;
    x.i32 :=.i32 cart[t1.i32].i32;
    t2.i32 :=.i32 1.i32;
    y.i32 :=.i32 cart[t2.i32].i32;
    t3.i32 :=.i32 getfield(this, xMax.i32).i32;
    if (x.i32 <.i32 t3.i32 ) goto ifbody_5;
      downX.i32 :=.i32 0.i32;
      upX.i32 :=.i32 x.i32 -.i32 1.i32;
      goto endif_5;
    ifbody_5:
      downX.i32 :=.i32 x.i32 +.i32 1.i32;
      t4.bool :=.bool invokevirtual(this, "gt", x.i32, 0.i32).bool;
      if (t4.bool &&.bool true.bool) goto ifbody_6;
        upX.i32 :=.i32 getfield(this, xMax.i32).i32;
        goto endif_6;
      ifbody_6:
        upX.i32 :=.i32 x.i32 -.i32 1.i32;
      endif_6:
      endif_5:
      t5.i32 :=.i32 getfield(this, yMax.i32).i32;
      if (y.i32 <.i32 t5.i32 ) goto ifbody_7;
        downY.i32 :=.i32 0.i32;
        upY.i32 :=.i32 y.i32 -.i32 1.i32;
        goto endif_7;
      ifbody_7:
        downY.i32 :=.i32 y.i32 +.i32 1.i32;
        t6.bool :=.bool invokevirtual(this, "gt", y.i32, 0.i32).bool;
        if (t6.bool &&.bool true.bool) goto ifbody_8;
          upY.i32 :=.i32 getfield(this, yMax.i32).i32;
          goto endif_8;
        ifbody_8:
          upY.i32 :=.i32 y.i32 -.i32 1.i32;
        endif_8:
        endif_7:
        ret_temp.array.i32 :=.array.i32 new(array, 8.i32).array.i32;
        t7.i32 :=.i32 0.i32;
        ret_temp[t7.i32].i32 :=.i32 invokevirtual(this, "trIdx", x.i32, upY.i32).i32;
        t8.i32 :=.i32 1.i32;
        ret_temp[t8.i32].i32 :=.i32 invokevirtual(this, "trIdx", upX.i32, upY.i32).i32;
        t9.i32 :=.i32 2.i32;
        ret_temp[t9.i32].i32 :=.i32 invokevirtual(this, "trIdx", upX.i32, y.i32).i32;
        t10.i32 :=.i32 3.i32;
        ret_temp[t10.i32].i32 :=.i32 invokevirtual(this, "trIdx", upX.i32, downY.i32).i32;
        t11.i32 :=.i32 4.i32;
        ret_temp[t11.i32].i32 :=.i32 invokevirtual(this, "trIdx", x.i32, downY.i32).i32;
        t12.i32 :=.i32 5.i32;
        ret_temp[t12.i32].i32 :=.i32 invokevirtual(this, "trIdx", downX.i32, downY.i32).i32;
        t13.i32 :=.i32 6.i32;
        ret_temp[t13.i32].i32 :=.i32 invokevirtual(this, "trIdx", downX.i32, y.i32).i32;
        t14.i32 :=.i32 7.i32;
        ret_temp[t14.i32].i32 :=.i32 invokevirtual(this, "trIdx", downX.i32, upY.i32).i32;
        ret.array.i32 ret_temp.array.i32;
      }

  .method public getLiveNeighborN(absPos.i32).i32 {
    ret_temp.i32 :=.i32 0.i32;
    neigh.array.i32 :=.array.i32 invokevirtual(this, "getNeighborCoords", $1.absPos.i32).array.i32;
    i.i32 :=.i32 0.i32;
    goto Test_4;
    Loop_4:
        t1.array.i32 :=.array.i32 getfield(this, field_temp.array.i32).array.i32;
        t2.i32 :=.i32 neigh[i.i32].i32;
        t3.i32 :=.i32 t1[t2.i32].i32;
        t4.bool :=.bool invokevirtual(this, "ne", t3.i32, 0.i32).bool;
        if (t4.bool &&.bool true.bool) goto ifbody_9;
          goto endif_9;
        ifbody_9:
          ret_temp.i32 :=.i32 ret_temp.i32 +.i32 1.i32;
        endif_9:
        i.i32 :=.i32 i.i32 +.i32 1.i32;
    Test_4:
      t5.i32 :=.i32 arraylength(neigh.array.i32).i32;
      if (i.i32 <.i32 t5.i32) goto Loop_4;
    End_4:
      ret.i32 ret_temp.i32;
    }

  .method public busyWait(ms.i32).bool {
    t1.i32 :=.i32 getfield(this, LOOPS_PER_MS.i32).i32;
    n.i32 :=.i32 $1.ms.i32 *.i32 t1.i32 ;
    i.i32 :=.i32 0.i32;
    goto Test_5;
    Loop_5:
      i.i32 :=.i32 i.i32 +.i32 1.i32;
    Test_5:
      if (i.i32 <.i32 n.i32 ) goto Loop_5;
    End_5:
      ret.bool true.bool;
    }

  .method public eq(a.i32, b.i32).bool {
    t1.bool :=.bool invokevirtual(this, "lt", $1.a.i32, $2.b.i32).bool;
    t2.bool :=.bool t1.bool !.bool t1.bool;
    t3.bool :=.bool invokevirtual(this, "lt", $2.b.i32, $1.a.i32).bool;
    t4.bool :=.bool t3.bool !.bool t3.bool;
    t5.bool :=.bool t2.bool &&.bool t4.bool;
    ret.bool t5.bool ;
  }

  .method public ne(a.i32, b.i32).bool {
    t1.bool :=.bool invokevirtual(this, "eq", $1.a.i32, $2.b.i32).bool;
    t2.bool :=.bool t1.bool !.bool t1.bool;
    ret.bool t2.bool ;
  }

  .method public lt(a.i32, b.i32).bool {
    t1.bool :=.bool $1.a.i32 <.i32 $2.b.i32 ;
    ret.bool t1.bool ;
  }

  .method public le(a.i32, b.i32).bool {
    t1.bool :=.bool invokevirtual(this, "lt", $1.a.i32, $2.b.i32).bool;
    t2.bool :=.bool t1.bool !.bool t1.bool;
    t3.bool :=.bool invokevirtual(this, "eq", $1.a.i32, $2.b.i32).bool;
    t4.bool :=.bool t3.bool !.bool t3.bool;
    t5.bool :=.bool t2.bool &&.bool t4.bool;
    t6.bool :=.bool t5.bool !.bool t5.bool;
    ret.bool t6.bool ;
  }

  .method public gt(a.i32, b.i32).bool {
    t1.bool :=.bool invokevirtual(this, "le", $1.a.i32, $2.b.i32).bool;
    t2.bool :=.bool t1.bool !.bool t1.bool;
    ret.bool t2.bool ;
  }

  .method public ge(a.i32, b.i32).bool {
    t1.bool :=.bool invokevirtual(this, "gt", $1.a.i32, $2.b.i32).bool;
    t2.bool :=.bool t1.bool !.bool t1.bool;
    t3.bool :=.bool invokevirtual(this, "eq", $1.a.i32, $2.b.i32).bool;
    t4.bool :=.bool t3.bool !.bool t3.bool;
    t5.bool :=.bool t2.bool &&.bool t4.bool;
    t6.bool :=.bool t5.bool !.bool t5.bool;
    ret.bool t6.bool ;
  }
}
