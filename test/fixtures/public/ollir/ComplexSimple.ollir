Simple {

.construct Simple().V {
invokespecial(this, "<init>").V;
}

.method public add(a.i32, b.i32).i32 {
aux1.i32 :=.i32 1.i32 +.i32 2.i32;
aux2.i32 :=.i32 invokevirtual(this, "constInstr", aux1.i32).i32;
aux3.i32 :=.i32 $1.a.i32 +.i32 aux2.i32;
aux4.i32 :=.i32 invokevirtual(this, "constInstr", 2.i32).i32;
c.i32 :=.i32 aux3.i32 +.i32 aux4.i32;

aux5.i32 :=.i32 c.i32 +.i32 1.i32;
ret.i32 aux5.i32;
}

.method public static main(args.array.String).V {
a.i32 :=.i32 20.i32;
b.i32 :=.i32 10.i32;
s.Simple :=.Simple new(Simple).Simple;
invokespecial(s.Simple, "<init>").V;
aux1.i32 :=.i32 1.i32 +.i32 1.i32;
aux2.Simple :=.Simple invokevirtual(this, "oi").Simple;
c.i32 :=.i32 invokevirtual(aux2.Simple, "add", a.i32, aux1.i32).i32;
invokestatic(io, "println", c.i32).V;

ret.V;
}

.method public oi().Simple {

ret.i32 2.i32;

}

.method public constInstr(lo.i32).i32 {
c.i32 :=.i32 0.i32;
c.i32 :=.i32 4.i32;
c.i32 :=.i32 8.i32 +.i32 2.i32;
c.i32 :=.i32 14.i32 -.i32 2.i32;
c.i32 :=.i32 250.i32 *.i32 3.i32;
c.i32 :=.i32 400.i32 /.i32 2.i32;
c.i32 :=.i32 1000.i32;
c.i32 :=.i32 100474650.i32;
c.i32 :=.i32 10.i32;
res.bool :=.bool 1.i32 <.i32 2.i32;

ret.i32 c.i32;

}


}