options
{
    LOOKAHEAD=1;
    NODE_SCOPE_HOOK=true;
}

PARSER_BEGIN(Grammar)
    import pt.up.fe.comp.jmm.report.*;
    public class Grammar {
        int numError = 0;
        boolean error = false;

        public static void main(String[] args) throws ParseException {
            // Object instantiation using the constructor with an argument
            // that reads from the standard input (keyboard)
            Grammar parser = new Grammar(System.in);
            SimpleNode root = parser.Program();
            root.dump("");

        }
        // https://github.com/javacc/javacc/blob/master/docs/tutorials/error-handling.md
        void error_skipto(String error) {
            ParseException e = generateParseException();  // generate the exception object
            Report report = new Report(ReportType.ERROR, Stage.SYNTATIC, e.currentToken.beginLine, error);
            System.out.println(report);
            Token t;

            do {
                t = getNextToken();
                if (t.kind == EOF)
                    return;
                if (t.kind == GrammarConstants.LBRACE)
                    break;
            }
            while (t.kind != GrammarConstants.RPARENTHESIS);
            do {
                if (t.kind == GrammarConstants.LBRACE)
                    break;
                t = getNextToken();
                if (t.kind == EOF || t.kind == GrammarConstants.SEMICOLON)
                    return;
            }
            while (t.kind != GrammarConstants.LBRACE);
            int counter = 1;
            do {
                t = getNextToken();
                if (t.kind == GrammarConstants.LBRACE)
                    counter++;
                else if (t.kind == GrammarConstants.RBRACE)
                    counter--;
                else if (t.kind == EOF)
                    return;
            }
            while (counter > 0);
        }

        void jjtreeOpenNodeScope(Node n) {
            ((SimpleNode)n).put("line", Integer.toString(getToken(1).beginLine));
            ((SimpleNode)n).put("col", Integer.toString(getToken(1).beginColumn));
        }

        void jjtreeCloseNodeScope(Node n) {
        }
    }
PARSER_END(Grammar)

<DEFAULT> SKIP : {
    " "
    | "\t"
    | "\n"
    | "\r"
    |  < "//" (~["\n","\r"])* ("\n" | "\r" | "\r\n") >              // 1 line comment
    |  < "/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/" > // multiple lines comment
}

<DEFAULT> TOKEN : {
        < #DIGIT :           ["0"-"9"] >
        | < UNDERSCORE :     "_" >

        | < ASSIGN :         "=" >
        | < LBRACE :         "{" >
        | < RBRACE :         "}" >
        | < LBRACKET :       "[" >
        | < RBRACKET:       "]" >
        | < COMMA:          "," >
        | < LPARENTHESIS:   "(" >
        | < RPARENTHESIS:   ")" >
        | < PERIOD:         "." >
        | < QUOTE:          "\"" >
        | < SEMICOLON:      ";" >

        | < ADD:            "+" >
        | < SUB:            "-" >
        | < AND:            "&&" >
        | < LESS:           "<" >
        | < MULT:           "*" >
        | < DIV:            "/" >
        | < NOT:            "!" >

        | < BOOLEAN:        "boolean" >
        | < CLASS:          "class" >
        | < ELSE:           "else" >
        | < EXTENDS:        "extends" >
        | < FALSE:          "false" >
        | < IF:             "if" >
        | < IMPORT:         "import" >
        | < INT:            "int" >
        | < LENGTH:         "length" >
        | < MAIN:           "main" >
        | < NEW:            "new" >
        | < PUBLIC:         "public" >
        | < RETURN:         "return" >
        | < STATIC:         "static" >
        | < STRING:         "String" >
        | < THIS:           "this" >
        | < TRUE:           "true" >
        | < VOID:           "void" >
        | < WHILE:          "while" >

        | < INTEGER:        ( < DIGIT > )+ >
        | < IDENTIFIER:     ("_"|"$"|["a"-"z"]|["A"-"Z"])("_"|"$"|["a"-"z"]|["A"-"Z"]|["0"-"9"])* >
}

// Production definition
SimpleNode Program(): {}
{
    ImportDeclaration() ClassDeclaration() <EOF> {return jjtThis;}
}

void ImportDeclaration() #ImportDeclaration: {Token t1,t2;}
{
    (<IMPORT> #Import() t1=<IDENTIFIER> { jjtThis.var=t1.image; } #Identifier() (<PERIOD> #Period t2=<IDENTIFIER> {jjtThis.var=t2.image;} #Identifier() )* <SEMICOLON> #Semicolon)*
}

void ClassDeclaration() #ClassDeclaration : {Token t1,t2;}
{
    <CLASS> #Class t1=<IDENTIFIER> {jjtThis.var=t1.image;} #Identifier() (<EXTENDS> #Extends t2=<IDENTIFIER> {jjtThis.var=t2.image;} #Identifier() )? <LBRACE> #LBrace() (VarDeclaration())* (MethodDeclaration())* <RBRACE> #RBrace
}

void VarDeclaration() #VarDeclaration : {Token t;}
{
    Type() t=<IDENTIFIER> {jjtThis.var=t.image;} #Identifier() <SEMICOLON> #Semicolon
}

void MethodDeclaration() #MethodDeclaration : {Token t1, t2, t3;}
{
    <PUBLIC> #Public()
    (Type() t1=<IDENTIFIER> {jjtThis.var = t1.image;} #Identifier <LPARENTHESIS> #LParenthesis() (Type() t2=<IDENTIFIER> {jjtThis.var=t2.image;} #Identifier() (<COMMA> Type() t3=<IDENTIFIER> {jjtThis.var=t3.image;} #Identifier())*)? <RPARENTHESIS> #RParenthesis
    <LBRACE> #LBrace MethodBody() <RETURN> #Return Expression() <SEMICOLON> #Semicolon <RBRACE> #RBrace
    | <STATIC> #Static <VOID> #Void <MAIN> #Main <LPARENTHESIS> #LParenthesis <STRING><LBRACKET><RBRACKET> #StringArray t2=<IDENTIFIER> {jjtThis.var=t2.image;} #Identifier() <RPARENTHESIS> #RParenthesis <LBRACE> #LBrace
    MethodBody() <RBRACE> #RBrace)
}


void MethodBody() #MethodBody :{}{
    (LOOKAHEAD(2) VarDeclaration())* (Statement())*
}

void Type() #Type : {Token t;}
{
    <INT> #Int() (t = <LBRACKET> <RBRACKET> #Array())?
    | t=<BOOLEAN> #Boolean
    | t=<IDENTIFIER> {jjtThis.var=t.image;} #Identifier
}

void Statement() #Statement : {}
{
    <LBRACE> #LBrace() (Statement())* <RBRACE> #RBrace()
    | (<IF>  <LPARENTHESIS> Expression() <RPARENTHESIS>) #IfExpression Statement() <ELSE> #Else Statement()
    | <WHILE> WhileStatement()
     | Expression()[<ASSIGN> #Assign Expression() ] <SEMICOLON> #Semicolon
}

// <WHILE> <LPARENTHESIS> Expression() <RPARENTHESIS> Statement()
void WhileStatement() #WhileStatement : {}
{
    try {
        <LPARENTHESIS> #LParenthesis Expression() <RPARENTHESIS> #RParenthesis
    }
    catch (ParseException e){
        error_skipto("Error on While Condition");
        error = true;
    }
    finally{
        if(!error) Statement();
    }
}

void Expression() #Expression : {Token t;}
{
    Less() (<AND> Less() #And(2))*
}

void Less() #void:{}
{
    AddOrSub() (<LESS> AddOrSub() #Less(2))*
}

void AddOrSub() #void:{}{

    MultOrDiv() (
    ( <ADD> |<SUB>)
     MultOrDiv() #AddSub(2)
    )*
}
void MultOrDiv() #void: {}
{
    Not() (
       ( <MULT> | <DIV> )
       Not() #MultDiv(2)
    )*
}

void Not() #void:{}
{
    <NOT>  Not() #Not(1)| Period()
}


void Period() #void:{Token t;}
{
    Arrays()(<PERIOD> #Period() (<LENGTH> #Length | (t=<IDENTIFIER> {jjtThis.var=t.image;} #Identifier() <LPARENTHESIS> #LParenthesis() (Parameter())? <RPARENTHESIS> #RParenthesis)))*
}

void Parameter() #void:{}
{
    Expression() (<COMMA> #Comma Expression())*
}

void Arrays()  #void:{}
{
    FinalTerms()(<LBRACKET> #LBracket Expression() <RBRACKET> #RBracket() (FinalTerms())?)*
}

void FinalTerms(): {Token t;}
{
     t=<INTEGER> {jjtThis.val = Integer.parseInt(t.image);} #Number
    | <TRUE> #True
    | <FALSE> #False
    | t=<IDENTIFIER> {jjtThis.var = t.image;} #Identifier
    | <THIS> #This
    | <NEW> #New() ((<INT> #Int <LBRACKET> #LBracket Expression() <RBRACKET> #RBracket) | (t=<IDENTIFIER> #Identifier {jjtThis.var=t.image;}  <LPARENTHESIS> #LParenthesis <RPARENTHESIS> #RParenthesis))
    | <LPARENTHESIS>  Expression() <RPARENTHESIS>
}


