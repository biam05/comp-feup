/* Generated By:JJTree&JavaCC: Do not edit this line. GrammarConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface GrammarConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int DIGIT = 5;
  /** RegularExpression Id. */
  int LETTER = 6;
  /** RegularExpression Id. */
  int UNDERSCORE = 7;
  /** RegularExpression Id. */
  int ASSIGN = 8;
  /** RegularExpression Id. */
  int LBRACE = 9;
  /** RegularExpression Id. */
  int RBRACE = 10;
  /** RegularExpression Id. */
  int LBRACKET = 11;
  /** RegularExpression Id. */
  int RBRACKET = 12;
  /** RegularExpression Id. */
  int COMMA = 13;
  /** RegularExpression Id. */
  int LPARENTHESIS = 14;
  /** RegularExpression Id. */
  int RPARENTHESIS = 15;
  /** RegularExpression Id. */
  int PERIOD = 16;
  /** RegularExpression Id. */
  int QUOTE = 17;
  /** RegularExpression Id. */
  int SEMICOLON = 18;
  /** RegularExpression Id. */
  int ADD_OR_SUB = 19;
  /** RegularExpression Id. */
  int AND = 20;
  /** RegularExpression Id. */
  int LESS = 21;
  /** RegularExpression Id. */
  int MULT_OR_DIV = 22;
  /** RegularExpression Id. */
  int NOT = 23;
  /** RegularExpression Id. */
  int BOOLEAN = 24;
  /** RegularExpression Id. */
  int CLASS = 25;
  /** RegularExpression Id. */
  int ELSE = 26;
  /** RegularExpression Id. */
  int EXTENDS = 27;
  /** RegularExpression Id. */
  int FALSE = 28;
  /** RegularExpression Id. */
  int IF = 29;
  /** RegularExpression Id. */
  int IMPORT = 30;
  /** RegularExpression Id. */
  int INT = 31;
  /** RegularExpression Id. */
  int LENGTH = 32;
  /** RegularExpression Id. */
  int MAIN = 33;
  /** RegularExpression Id. */
  int NEW = 34;
  /** RegularExpression Id. */
  int PUBLIC = 35;
  /** RegularExpression Id. */
  int RETURN = 36;
  /** RegularExpression Id. */
  int STATIC = 37;
  /** RegularExpression Id. */
  int STRING = 38;
  /** RegularExpression Id. */
  int THIS = 39;
  /** RegularExpression Id. */
  int TRUE = 40;
  /** RegularExpression Id. */
  int VOID = 41;
  /** RegularExpression Id. */
  int WHILE = 42;
  /** RegularExpression Id. */
  int INTEGER = 43;
  /** RegularExpression Id. */
  int IDENTIFIER = 44;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<DIGIT>",
    "<LETTER>",
    "\"_\"",
    "\"=\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\",\"",
    "\"(\"",
    "\")\"",
    "\".\"",
    "\"\\\"\"",
    "\";\"",
    "<ADD_OR_SUB>",
    "\"&&\"",
    "\"<\"",
    "<MULT_OR_DIV>",
    "\"!\"",
    "\"boolean\"",
    "\"class\"",
    "\"else\"",
    "\"extends\"",
    "\"false\"",
    "\"if\"",
    "\"import\"",
    "\"int\"",
    "\"length\"",
    "\"main\"",
    "\"new\"",
    "\"public\"",
    "\"return\"",
    "\"static\"",
    "\"String\"",
    "\"this\"",
    "\"true\"",
    "\"void\"",
    "\"while\"",
    "<INTEGER>",
    "<IDENTIFIER>",
  };

}
